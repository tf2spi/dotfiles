#!/bin/sh

# Some projects (like external ones) require entirely different checks and
# formatters than the ones I create. Use per-directory commit hooks to control
# this and skip the rest of the file.
REPO_HOOK="$(git rev-parse --show-toplevel)/.git/hooks/pre-commit"
if [ -f "$REPO_HOOK" ] ; then
	exec "$REPO_HOOK" "$@"
fi

# Default pre-commit hook script by git
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	against=$(git hash-object -t tree /dev/null)
fi
allownonascii=$(git config --type=bool hooks.allownonascii)
exec 1>&2
if [ "$allownonascii" != "true" ] &&
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If clangformat.style is explicitly defined globally or in repo,
# I explicitly opt in to run git clang-format. I usually only do
# this for external projects because they have different code styles
# and are usually more strict about it than I am. Oh well.
if git config --get clangformat.style ; then
	git clang-format --staged $against
	git add "$(git rev-parse --show-toplevel)"
fi
exec git diff-index --check --cached $against --
